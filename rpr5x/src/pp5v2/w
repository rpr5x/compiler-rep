/* File: ast_expr.cc
 * -----------------
 * Implementation of expression node classes.
 */
#include "ast_expr.h"
#include "ast_type.h"
#include "ast_decl.h"
#include <string.h>
#include "codegen.h"


extern CodeGenerator *codeGen;


IntConstant::IntConstant(yyltype loc, int val) : Expr(loc) {
    value = val;
}

void IntConstant::Emit()
{
  
  this->intLoc = codeGen->GenLoadConstant(this->value);
  FnDecl::numBytes += 4;  
}


DoubleConstant::DoubleConstant(yyltype loc, double val) : Expr(loc) {
    value = val;
}

//Not necessary since doubles are not used but it's good practice to include this
void DoubleConstant::Emit()
{
  
}

BoolConstant::BoolConstant(yyltype loc, bool val) : Expr(loc) {
    value = val;
}

void BoolConstant::Emit()
{
  printf("The value is %d\n", this->value);



  this->boolLoc = codeGen->GenLoadConstant(this->value);
  FnDecl::numBytes += 4;
}

StringConstant::StringConstant(yyltype loc, const char *val) : Expr(loc) {
    Assert(val != NULL);
    value = strdup(val);
}

void StringConstant::Emit()
{
  this->strLoc = codeGen->GenLoadConstant(this->value);
  FnDecl::numBytes += 4;
}

//Not sure if this is needed
/*void NullConstant::Emit()
{
 
}*/


Operator::Operator(yyltype loc, const char *tok) : Node(loc) {
    Assert(tok != NULL);
    strncpy(tokenString, tok, sizeof(tokenString));
}
CompoundExpr::CompoundExpr(Expr *l, Operator *o, Expr *r) 
  : Expr(Join(l->GetLocation(), r->GetLocation())) {
    Assert(l != NULL && o != NULL && r != NULL);
    (op=o)->SetParent(this);
    (left=l)->SetParent(this); 
    (right=r)->SetParent(this);
}

CompoundExpr::CompoundExpr(Operator *o, Expr *r) 
  : Expr(Join(o->GetLocation(), r->GetLocation())) {
    Assert(o != NULL && r != NULL);
    left = NULL; 
    (op=o)->SetParent(this);
    (right=r)->SetParent(this);
}
   
void ArithmeticExpr::Emit()
{
  if(left) left->Emit();
  op->Emit();
  right->Emit();

  const char * opName;
  opName = op->str();
  FnDecl::numBytes+=4; //Update BeginFunc size

  FieldAccess * var1 = dynamic_cast<FieldAccess *>(left);
  FieldAccess * var2 = dynamic_cast<FieldAccess *>(right);


  //Account for unary negation operator by creating a zero constant and doing 0-x = -x
  if(strcmp(opName,"-") == 0 && !left)
  {
     Location * leftZero = codeGen->GenLoadConstant(0);
     FnDecl::numBytes+=4;
     this->arithLoc = codeGen->GenBinaryOp(opName, leftZero, right->GetLocationNode());

  }
  else //Normal binary arithmetic
  {
     if(var1 && var2)
     {
       Decl * d1 = FindDecl(var1->GetId());
       Decl * d2 = FindDecl(var2->GetId());
       VarDecl * v1 = dynamic_cast<VarDecl *>(d1);
       VarDecl * v2 = dynamic_cast<VarDecl *>(d2);
       Location * varLoc1 = v1->GetLocationNode();
       Location * varLoc2 = v2->GetLocationNode();
       this->arithLoc = codeGen->GenBinaryOp(opName, varLoc1, varLoc2); 
     }
  }


  
}

void RelationalExpr::Emit()
{
  //Handle op signs of >, >= and <= slightly different here since MIPS does not support these


  left->Emit();
  op->Emit();
  right->Emit();

  const char * opName;
  opName = op->str();
  FnDecl::numBytes+=4; //Update BeginFunc size


  FieldAccess * var1 = dynamic_cast<FieldAccess *>(left);
  FieldAccess * var2 = dynamic_cast<FieldAccess *>(right);

 
  //If the operand is a greater than symbol, make it a less than and switch the two other arguments.
  if(strcmp(opName, ">") == 0)
  {    
     opName = "<";
     this->relLoc = codeGen->GenBinaryOp(opName, right->GetLocationNode(), left->GetLocationNode());
  }
  else if(strcmp(opName, ">=") == 0)
  {  
     FnDecl::numBytes+=8;
     const char * opName1 = "<";
     const char * opName2 = "==";
     const char * opName3 = "||";
     Location * loc1 = codeGen->GenBinaryOp(opName1, right->GetLocationNode(), left->GetLocationNode());//Reverse for less than
     Location * loc2 = codeGen->GenBinaryOp(opName2, left->GetLocationNode(), right->GetLocationNode());
     this->relLoc = codeGen->GenBinaryOp(opName3, loc1, loc2);  

  }
  else if(strcmp(opName, "<=") == 0)
  {
     FnDecl::numBytes+=8;
     const char * opName1 = "<";  
     const char * opName2 = "==";
     const char * opName3 = "||";
     Location * loc1 = codeGen->GenBinaryOp(opName1, left->GetLocationNode(), right->GetLocationNode());//Less than
     Location * loc2 = codeGen->GenBinaryOp(opName2, left->GetLocationNode(), right->GetLocationNode());//Equal to
     this->relLoc = codeGen->GenBinaryOp(opName3, loc1, loc2);//Logical OR

  }
  else if (strcmp(opName, "<") == 0)
  {
    Decl * d1 = FindDecl(var1->GetId());
    Decl * d2 = FindDecl(var2->GetId());
    VarDecl * v1 = dynamic_cast<VarDecl *>(d1);
    VarDecl * v2 = dynamic_cast<VarDecl *>(d2);
    if(v1 && v2)
    {
      Location * varLoc = v1->GetLocationNode();  
      //FnDecl::numBytes+=4; //Update BeginFunc size 
      Location * varLoc2 = v2->GetLocationNode();
      this->relLoc = codeGen->GenBinaryOp(opName, varLoc, varLoc2);    
    }   
    
  }
}

void EqualityExpr::Emit()//Revise this for array accesses later
{
  left->Emit();
  op->Emit();
  right->Emit();

  const char * opName;
  opName = op->str();
  FnDecl::numBytes+=4; //Update BeginFunc size


  FieldAccess * var1 = dynamic_cast<FieldAccess *>(left);
  FieldAccess * var2 = dynamic_cast<FieldAccess *>(right);

  //Handle Not Equal To by checking if left < right or if left > right
  if(strcmp(opName, "!=") == 0)
  {
     FnDecl::numBytes+=8;
     const char * opName = "<";
     const char * opName2 = "||";
     Location * loc1 = codeGen->GenBinaryOp(opName, left->GetLocationNode(), right->GetLocationNode());//Reverse for less than
     Location * loc2 = codeGen->GenBinaryOp(opName, right->GetLocationNode(), left->GetLocationNode());
     this->eqLoc = codeGen->GenBinaryOp(opName2, loc1, loc2);  
  }

  else
  {
    //Handles the case where the operator is == and both operands are variables 
    if(var1 && var2)
    {
      Decl * d1 = FindDecl(var1->GetId());
      Decl * d2 = FindDecl(var2->GetId());
      VarDecl * v1 = dynamic_cast<VarDecl *>(d1);
      VarDecl * v2 = dynamic_cast<VarDecl *>(d2);
      if(v1 && v2)
      {
        Location * varLoc = v1->GetLocationNode();  
        //FnDecl::numBytes+=4; //Update BeginFunc size 
        Location * varLoc2 = v2->GetLocationNode();
        this->eqLoc = codeGen->GenBinaryOp(opName, varLoc, varLoc2); 
      }
    } 
    else if(var1)
    {
      Decl * d1 = FindDecl(var1->GetId());
      VarDecl * v1 = dynamic_cast<VarDecl *>(d1);
     
      if(v1)
      {
        Location * varLoc = v1->GetLocationNode();  
        //FnDecl::numBytes+=4; //Update BeginFunc size 
        Location * rightLoc = right->GetLocationNode();
        this->eqLoc = codeGen->GenBinaryOp(opName, varLoc, rightLoc); 
      }

     }
     else //Default case of two integers, strings, or bools (this should be revised for array accesses later)
     {
        this->eqLoc = codeGen->GenBinaryOp(opName, left->GetLocationNode(), right->GetLocationNode());

     }   
   }   

}

void LogicalExpr::Emit()
{
  if(left) left->Emit();
  op->Emit();
  right->Emit();

  const char * opName;
  opName = op->str();
  FnDecl::numBytes+=4; //Update BeginFunc size

  //Handle "not" logical operator
  if(!left && strcmp(opName, "!") == 0)
  {
   Location * zeroLoc = codeGen->GenLoadConstant(0);
   FnDecl::numBytes+=4; 
   Location * rightLoc = right->GetLocationNode();
   const char * opName = "==";
   this->logLoc = codeGen->GenBinaryOp(opName, rightLoc, zeroLoc); 

  }
  else 
  {
    this->logLoc = codeGen->GenBinaryOp(opName, left->GetLocationNode(), right->GetLocationNode()); 
  }
}

void AssignExpr::Emit()
{
  left->Emit();
  op->Emit();
  right->Emit();   

  FieldAccess * left2 = dynamic_cast<FieldAccess *>(left);
  FieldAccess * right2 = dynamic_cast<FieldAccess *>(right);

  if(left2 && right2)
  {
    Decl * d1 = FindDecl(left2->GetId());
    Decl * d2 = FindDecl(right2->GetId());
    VarDecl * v1 = dynamic_cast<VarDecl *>(d1);
    VarDecl * v2 = dynamic_cast<VarDecl *>(d2);

    if(v1 && v2)
    {
      Location * varLoc = v1->GetLocationNode();  
      //FnDecl::numBytes+=4; //Update BeginFunc size 
      Location * varLoc2 = v2->GetLocationNode();
      codeGen->GenAssign(varLoc, varLoc2);
    }
    
  }
  else if(left2)
  {
     Decl * d1 = FindDecl(left2->GetId());
     VarDecl * v1 = dynamic_cast<VarDecl *>(d1);

     if(v1)
     {
       Location * varLoc = v1->GetLocationNode();
       Location * rightLoc = right->GetLocationNode();
       codeGen->GenAssign(varLoc, rightLoc);
     } 
  }
} 

ArrayAccess::ArrayAccess(yyltype loc, Expr *b, Expr *s) : LValue(loc) {
    (base=b)->SetParent(this); 
    (subscript=s)->SetParent(this);
}
     
FieldAccess::FieldAccess(Expr *b, Identifier *f) 
  : LValue(b? Join(b->GetLocation(), f->GetLocation()) : *f->GetLocation()) {
    Assert(f != NULL); // b can be be NULL (just means no explicit base)
    base = b; 
    if (base) base->SetParent(this); 
    (field=f)->SetParent(this);
}

void FieldAccess::Emit()
{
  //Gets current offset, constructs a new Location for the field (if there isn't one present) and updates the offset.
  int offset = codeGen->OffsetToCurrentLocal;
  
  Decl * d = FindDecl(this->field);
  VarDecl * v = dynamic_cast<VarDecl *>(d);
  if(v && !(v->varLoc))
  {
    
    v->varLoc = new Location(fpRelative, offset, this->field->GetName());
    FnDecl::numBytes+=4;
    codeGen->OffsetToCurrentLocal -= 4;
  }
  

}


Call::Call(yyltype loc, Expr *b, Identifier *f, List<Expr*> *a) : Expr(loc)  {
    Assert(f != NULL && a != NULL); // b can be be NULL (just means no explicit base)
    base = b;
    if (base) base->SetParent(this);
    (field=f)->SetParent(this);
    (actuals=a)->SetParentAll(this);
}
 

NewExpr::NewExpr(yyltype loc, NamedType *c) : Expr(loc) { 
  Assert(c != NULL);
  (cType=c)->SetParent(this);
}


NewArrayExpr::NewArrayExpr(yyltype loc, Expr *sz, Type *et) : Expr(loc) {
    Assert(sz != NULL && et != NULL);
    (size=sz)->SetParent(this); 
    (elemType=et)->SetParent(this);
}

       
