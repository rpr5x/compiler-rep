	# standard Decaf preamble 
	  .text
	  .align 2
	  .globl main
  _Binky:
	# BeginFunc 100
	  subu $sp, $sp, 8	# decrement sp to make space to save ra, fp
	  sw $fp, 8($sp)	# save fp
	  sw $ra, 4($sp)	# save ra
	  addiu $fp, $sp, 8	# set up new fp
	  subu $sp, $sp, 100	# decrement sp to make space for locals/temps
	# _tmp0 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -8($fp)	# spill _tmp0 from $t2 to $fp-8
	# _tmp1 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -12($fp)	# spill _tmp1 from $t2 to $fp-12
	# _tmp2 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -16($fp)	# spill _tmp2 from $t2 to $fp-16
	# _tmp3 = _tmp1 < _tmp2
	  lw $t0, -12($fp)	# fill _tmp1 to $t0 from $fp-12
	  lw $t1, -16($fp)	# fill _tmp2 to $t1 from $fp-16
	  slt $t2, $t0, $t1	
	  sw $t2, -20($fp)	# spill _tmp3 from $t2 to $fp-20
	# _tmp4 = *(c + -4)
	  lw $t0, 12($fp)	# fill c to $t0 from $fp+12
	  lw $t2, -4($t0) 	# load with offset
	  sw $t2, -24($fp)	# spill _tmp4 from $t2 to $fp-24
	# _tmp5 = _tmp1 < _tmp4
	  lw $t0, -12($fp)	# fill _tmp1 to $t0 from $fp-12
	  lw $t1, -24($fp)	# fill _tmp4 to $t1 from $fp-24
	  slt $t2, $t0, $t1	
	  sw $t2, -28($fp)	# spill _tmp5 from $t2 to $fp-28
	# _tmp6 = _tmp5 == _tmp2
	  lw $t0, -28($fp)	# fill _tmp5 to $t0 from $fp-28
	  lw $t1, -16($fp)	# fill _tmp2 to $t1 from $fp-16
	  seq $t2, $t0, $t1	
	  sw $t2, -32($fp)	# spill _tmp6 from $t2 to $fp-32
	# _tmp7 = _tmp3 || _tmp6
	  lw $t0, -20($fp)	# fill _tmp3 to $t0 from $fp-20
	  lw $t1, -32($fp)	# fill _tmp6 to $t1 from $fp-32
	  or $t2, $t0, $t1	
	  sw $t2, -36($fp)	# spill _tmp7 from $t2 to $fp-36
	# IfZ _tmp7 Goto _L0
	  lw $t0, -36($fp)	# fill _tmp7 to $t0 from $fp-36
	  beqz $t0, _L0	# branch if _tmp7 is zero 
	# _tmp8 = "Decaf runtime error: Array size is <= 0\n"
	  .data			# create string constant marked with label
	  _string1: .asciiz "Decaf runtime error: Array size is <= 0\n"
	  .text
	  la $t2, _string1	# load label
	  sw $t2, -40($fp)	# spill _tmp8 from $t2 to $fp-40
	# PushParam _tmp8
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -40($fp)	# fill _tmp8 to $t0 from $fp-40
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L0:
	# _tmp9 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -44($fp)	# spill _tmp9 from $t2 to $fp-44
	# _tmp10 = _tmp9 * _tmp1
	  lw $t0, -44($fp)	# fill _tmp9 to $t0 from $fp-44
	  lw $t1, -12($fp)	# fill _tmp1 to $t1 from $fp-12
	  mul $t2, $t0, $t1	
	  sw $t2, -48($fp)	# spill _tmp10 from $t2 to $fp-48
	# _tmp11 = c + _tmp10
	  lw $t0, 12($fp)	# fill c to $t0 from $fp+12
	  lw $t1, -48($fp)	# fill _tmp10 to $t1 from $fp-48
	  add $t2, $t0, $t1	
	  sw $t2, -52($fp)	# spill _tmp11 from $t2 to $fp-52
	# _tmp12 = *(_tmp11)
	  lw $t0, -52($fp)	# fill _tmp11 to $t0 from $fp-52
	  lw $t2, 0($t0) 	# load with offset
	  sw $t2, -56($fp)	# spill _tmp12 from $t2 to $fp-56
	# _tmp13 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -60($fp)	# spill _tmp13 from $t2 to $fp-60
	# _tmp14 = _tmp12 < _tmp13
	  lw $t0, -56($fp)	# fill _tmp12 to $t0 from $fp-56
	  lw $t1, -60($fp)	# fill _tmp13 to $t1 from $fp-60
	  slt $t2, $t0, $t1	
	  sw $t2, -64($fp)	# spill _tmp14 from $t2 to $fp-64
	# _tmp15 = *(c + -4)
	  lw $t0, 12($fp)	# fill c to $t0 from $fp+12
	  lw $t2, -4($t0) 	# load with offset
	  sw $t2, -68($fp)	# spill _tmp15 from $t2 to $fp-68
	# _tmp16 = _tmp1 < _tmp15
	  lw $t0, -12($fp)	# fill _tmp1 to $t0 from $fp-12
	  lw $t1, -68($fp)	# fill _tmp15 to $t1 from $fp-68
	  slt $t2, $t0, $t1	
	  sw $t2, -72($fp)	# spill _tmp16 from $t2 to $fp-72
	# _tmp17 = _tmp16 == _tmp13
	  lw $t0, -72($fp)	# fill _tmp16 to $t0 from $fp-72
	  lw $t1, -60($fp)	# fill _tmp13 to $t1 from $fp-60
	  seq $t2, $t0, $t1	
	  sw $t2, -76($fp)	# spill _tmp17 from $t2 to $fp-76
	# _tmp18 = _tmp14 || _tmp17
	  lw $t0, -64($fp)	# fill _tmp14 to $t0 from $fp-64
	  lw $t1, -76($fp)	# fill _tmp17 to $t1 from $fp-76
	  or $t2, $t0, $t1	
	  sw $t2, -80($fp)	# spill _tmp18 from $t2 to $fp-80
	# IfZ _tmp18 Goto _L1
	  lw $t0, -80($fp)	# fill _tmp18 to $t0 from $fp-80
	  beqz $t0, _L1	# branch if _tmp18 is zero 
	# _tmp19 = "Decaf runtime error: Array size is <= 0\n"
	  .data			# create string constant marked with label
	  _string2: .asciiz "Decaf runtime error: Array size is <= 0\n"
	  .text
	  la $t2, _string2	# load label
	  sw $t2, -84($fp)	# spill _tmp19 from $t2 to $fp-84
	# PushParam _tmp19
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -84($fp)	# fill _tmp19 to $t0 from $fp-84
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L1:
	# _tmp20 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -88($fp)	# spill _tmp20 from $t2 to $fp-88
	# _tmp21 = _tmp20 * _tmp1
	  lw $t0, -88($fp)	# fill _tmp20 to $t0 from $fp-88
	  lw $t1, -12($fp)	# fill _tmp1 to $t1 from $fp-12
	  mul $t2, $t0, $t1	
	  sw $t2, -92($fp)	# spill _tmp21 from $t2 to $fp-92
	# _tmp22 = c + _tmp21
	  lw $t0, 12($fp)	# fill c to $t0 from $fp+12
	  lw $t1, -92($fp)	# fill _tmp21 to $t1 from $fp-92
	  add $t2, $t0, $t1	
	  sw $t2, -96($fp)	# spill _tmp22 from $t2 to $fp-96
	# _tmp23 = *(_tmp22)
	  lw $t0, -96($fp)	# fill _tmp22 to $t0 from $fp-96
	  lw $t2, 0($t0) 	# load with offset
	  sw $t2, -100($fp)	# spill _tmp23 from $t2 to $fp-100
	# Return _tmp23
	  lw $t2, -100($fp)	# fill _tmp23 to $t2 from $fp-100
	  move $v0, $t2		# assign return value into $v0
	  move $sp, $fp		# pop callee frame off stack
	  lw $ra, -4($fp)	# restore saved ra
	  lw $fp, 0($fp)	# restore saved fp
	  jr $ra		# return from function
	# EndFunc
	# (below handles reaching end of fn body with no explicit return)
	  move $sp, $fp		# pop callee frame off stack
	  lw $ra, -4($fp)	# restore saved ra
	  lw $fp, 0($fp)	# restore saved fp
	  jr $ra		# return from function
  main:
	# BeginFunc 428
	  subu $sp, $sp, 8	# decrement sp to make space to save ra, fp
	  sw $fp, 8($sp)	# save fp
	  sw $ra, 4($sp)	# save ra
	  addiu $fp, $sp, 8	# set up new fp
	  subu $sp, $sp, 428	# decrement sp to make space for locals/temps
	# _tmp24 = 5
	  li $t2, 5		# load constant value 5 into $t2
	  sw $t2, -16($fp)	# spill _tmp24 from $t2 to $fp-16
	# _tmp25 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -20($fp)	# spill _tmp25 from $t2 to $fp-20
	# _tmp26 = _tmp24 < _tmp25
	  lw $t0, -16($fp)	# fill _tmp24 to $t0 from $fp-16
	  lw $t1, -20($fp)	# fill _tmp25 to $t1 from $fp-20
	  slt $t2, $t0, $t1	
	  sw $t2, -24($fp)	# spill _tmp26 from $t2 to $fp-24
	# IfZ _tmp26 Goto _L2
	  lw $t0, -24($fp)	# fill _tmp26 to $t0 from $fp-24
	  beqz $t0, _L2	# branch if _tmp26 is zero 
	# _tmp27 = "Decaf runtime error: Array size is <= 0\n"
	  .data			# create string constant marked with label
	  _string3: .asciiz "Decaf runtime error: Array size is <= 0\n"
	  .text
	  la $t2, _string3	# load label
	  sw $t2, -28($fp)	# spill _tmp27 from $t2 to $fp-28
	# PushParam _tmp27
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -28($fp)	# fill _tmp27 to $t0 from $fp-28
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L2:
	# _tmp28 = 1
	  li $t2, 1		# load constant value 1 into $t2
	  sw $t2, -36($fp)	# spill _tmp28 from $t2 to $fp-36
	# _tmp29 = _tmp28 + _tmp24
	  lw $t0, -36($fp)	# fill _tmp28 to $t0 from $fp-36
	  lw $t1, -16($fp)	# fill _tmp24 to $t1 from $fp-16
	  add $t2, $t0, $t1	
	  sw $t2, -40($fp)	# spill _tmp29 from $t2 to $fp-40
	# _tmp30 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -44($fp)	# spill _tmp30 from $t2 to $fp-44
	# _tmp31 = _tmp29 * _tmp30
	  lw $t0, -40($fp)	# fill _tmp29 to $t0 from $fp-40
	  lw $t1, -44($fp)	# fill _tmp30 to $t1 from $fp-44
	  mul $t2, $t0, $t1	
	  sw $t2, -48($fp)	# spill _tmp31 from $t2 to $fp-48
	# PushParam _tmp31
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -48($fp)	# fill _tmp31 to $t0 from $fp-48
	  sw $t0, 4($sp)	# copy param value to stack
	# _tmp32 = LCall _Alloc
	  jal _Alloc         	# jump to function
	  move $t2, $v0		# copy function return value from $v0
	  sw $t2, -52($fp)	# spill _tmp32 from $t2 to $fp-52
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# *(_tmp32) = _tmp24
	  lw $t0, -16($fp)	# fill _tmp24 to $t0 from $fp-16
	  lw $t2, -52($fp)	# fill _tmp32 to $t2 from $fp-52
	  sw $t0, 0($t2) 	# store with offset
	# _tmp33 = _tmp32 + _tmp30
	  lw $t0, -52($fp)	# fill _tmp32 to $t0 from $fp-52
	  lw $t1, -44($fp)	# fill _tmp30 to $t1 from $fp-44
	  add $t2, $t0, $t1	
	  sw $t2, -56($fp)	# spill _tmp33 from $t2 to $fp-56
	# d = _tmp33
	  lw $t2, -56($fp)	# fill _tmp33 to $t2 from $fp-56
	  sw $t2, -12($fp)	# spill d from $t2 to $fp-12
	# _tmp34 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -60($fp)	# spill _tmp34 from $t2 to $fp-60
	# _tmp35 = 12
	  li $t2, 12		# load constant value 12 into $t2
	  sw $t2, -64($fp)	# spill _tmp35 from $t2 to $fp-64
	# _tmp36 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -68($fp)	# spill _tmp36 from $t2 to $fp-68
	# _tmp37 = _tmp35 < _tmp36
	  lw $t0, -64($fp)	# fill _tmp35 to $t0 from $fp-64
	  lw $t1, -68($fp)	# fill _tmp36 to $t1 from $fp-68
	  slt $t2, $t0, $t1	
	  sw $t2, -72($fp)	# spill _tmp37 from $t2 to $fp-72
	# IfZ _tmp37 Goto _L3
	  lw $t0, -72($fp)	# fill _tmp37 to $t0 from $fp-72
	  beqz $t0, _L3	# branch if _tmp37 is zero 
	# _tmp38 = "Decaf runtime error: Array size is <= 0\n"
	  .data			# create string constant marked with label
	  _string4: .asciiz "Decaf runtime error: Array size is <= 0\n"
	  .text
	  la $t2, _string4	# load label
	  sw $t2, -76($fp)	# spill _tmp38 from $t2 to $fp-76
	# PushParam _tmp38
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -76($fp)	# fill _tmp38 to $t0 from $fp-76
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L3:
	# _tmp39 = 1
	  li $t2, 1		# load constant value 1 into $t2
	  sw $t2, -84($fp)	# spill _tmp39 from $t2 to $fp-84
	# _tmp40 = _tmp39 + _tmp35
	  lw $t0, -84($fp)	# fill _tmp39 to $t0 from $fp-84
	  lw $t1, -64($fp)	# fill _tmp35 to $t1 from $fp-64
	  add $t2, $t0, $t1	
	  sw $t2, -88($fp)	# spill _tmp40 from $t2 to $fp-88
	# _tmp41 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -92($fp)	# spill _tmp41 from $t2 to $fp-92
	# _tmp42 = _tmp40 * _tmp41
	  lw $t0, -88($fp)	# fill _tmp40 to $t0 from $fp-88
	  lw $t1, -92($fp)	# fill _tmp41 to $t1 from $fp-92
	  mul $t2, $t0, $t1	
	  sw $t2, -96($fp)	# spill _tmp42 from $t2 to $fp-96
	# PushParam _tmp42
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -96($fp)	# fill _tmp42 to $t0 from $fp-96
	  sw $t0, 4($sp)	# copy param value to stack
	# _tmp43 = LCall _Alloc
	  jal _Alloc         	# jump to function
	  move $t2, $v0		# copy function return value from $v0
	  sw $t2, -100($fp)	# spill _tmp43 from $t2 to $fp-100
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# *(_tmp43) = _tmp35
	  lw $t0, -64($fp)	# fill _tmp35 to $t0 from $fp-64
	  lw $t2, -100($fp)	# fill _tmp43 to $t2 from $fp-100
	  sw $t0, 0($t2) 	# store with offset
	# _tmp44 = _tmp43 + _tmp41
	  lw $t0, -100($fp)	# fill _tmp43 to $t0 from $fp-100
	  lw $t1, -92($fp)	# fill _tmp41 to $t1 from $fp-92
	  add $t2, $t0, $t1	
	  sw $t2, -104($fp)	# spill _tmp44 from $t2 to $fp-104
	# _tmp45 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -108($fp)	# spill _tmp45 from $t2 to $fp-108
	# _tmp46 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -112($fp)	# spill _tmp46 from $t2 to $fp-112
	# _tmp47 = _tmp45 < _tmp46
	  lw $t0, -108($fp)	# fill _tmp45 to $t0 from $fp-108
	  lw $t1, -112($fp)	# fill _tmp46 to $t1 from $fp-112
	  slt $t2, $t0, $t1	
	  sw $t2, -116($fp)	# spill _tmp47 from $t2 to $fp-116
	# _tmp48 = *(d + -4)
	  lw $t0, -12($fp)	# fill d to $t0 from $fp-12
	  lw $t2, -4($t0) 	# load with offset
	  sw $t2, -120($fp)	# spill _tmp48 from $t2 to $fp-120
	# _tmp49 = _tmp45 < _tmp48
	  lw $t0, -108($fp)	# fill _tmp45 to $t0 from $fp-108
	  lw $t1, -120($fp)	# fill _tmp48 to $t1 from $fp-120
	  slt $t2, $t0, $t1	
	  sw $t2, -124($fp)	# spill _tmp49 from $t2 to $fp-124
	# _tmp50 = _tmp49 == _tmp46
	  lw $t0, -124($fp)	# fill _tmp49 to $t0 from $fp-124
	  lw $t1, -112($fp)	# fill _tmp46 to $t1 from $fp-112
	  seq $t2, $t0, $t1	
	  sw $t2, -128($fp)	# spill _tmp50 from $t2 to $fp-128
	# _tmp51 = _tmp47 || _tmp50
	  lw $t0, -116($fp)	# fill _tmp47 to $t0 from $fp-116
	  lw $t1, -128($fp)	# fill _tmp50 to $t1 from $fp-128
	  or $t2, $t0, $t1	
	  sw $t2, -132($fp)	# spill _tmp51 from $t2 to $fp-132
	# IfZ _tmp51 Goto _L4
	  lw $t0, -132($fp)	# fill _tmp51 to $t0 from $fp-132
	  beqz $t0, _L4	# branch if _tmp51 is zero 
	# _tmp52 = "Decaf runtime error: Array subscript out of bound..."
	  .data			# create string constant marked with label
	  _string5: .asciiz "Decaf runtime error: Array subscript out of bounds\n"
	  .text
	  la $t2, _string5	# load label
	  sw $t2, -136($fp)	# spill _tmp52 from $t2 to $fp-136
	# PushParam _tmp52
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -136($fp)	# fill _tmp52 to $t0 from $fp-136
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L4:
	# _tmp53 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -140($fp)	# spill _tmp53 from $t2 to $fp-140
	# _tmp54 = _tmp53 * _tmp45
	  lw $t0, -140($fp)	# fill _tmp53 to $t0 from $fp-140
	  lw $t1, -108($fp)	# fill _tmp45 to $t1 from $fp-108
	  mul $t2, $t0, $t1	
	  sw $t2, -144($fp)	# spill _tmp54 from $t2 to $fp-144
	# _tmp55 = d + _tmp54
	  lw $t0, -12($fp)	# fill d to $t0 from $fp-12
	  lw $t1, -144($fp)	# fill _tmp54 to $t1 from $fp-144
	  add $t2, $t0, $t1	
	  sw $t2, -148($fp)	# spill _tmp55 from $t2 to $fp-148
	# *(_tmp55) = _tmp44
	  lw $t0, -104($fp)	# fill _tmp44 to $t0 from $fp-104
	  lw $t2, -148($fp)	# fill _tmp55 to $t2 from $fp-148
	  sw $t0, 0($t2) 	# store with offset
	# _tmp56 = 10
	  li $t2, 10		# load constant value 10 into $t2
	  sw $t2, -152($fp)	# spill _tmp56 from $t2 to $fp-152
	# _tmp57 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -156($fp)	# spill _tmp57 from $t2 to $fp-156
	# _tmp58 = _tmp56 < _tmp57
	  lw $t0, -152($fp)	# fill _tmp56 to $t0 from $fp-152
	  lw $t1, -156($fp)	# fill _tmp57 to $t1 from $fp-156
	  slt $t2, $t0, $t1	
	  sw $t2, -160($fp)	# spill _tmp58 from $t2 to $fp-160
	# IfZ _tmp58 Goto _L5
	  lw $t0, -160($fp)	# fill _tmp58 to $t0 from $fp-160
	  beqz $t0, _L5	# branch if _tmp58 is zero 
	# _tmp59 = "Decaf runtime error: Array size is <= 0\n"
	  .data			# create string constant marked with label
	  _string6: .asciiz "Decaf runtime error: Array size is <= 0\n"
	  .text
	  la $t2, _string6	# load label
	  sw $t2, -164($fp)	# spill _tmp59 from $t2 to $fp-164
	# PushParam _tmp59
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -164($fp)	# fill _tmp59 to $t0 from $fp-164
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L5:
	# _tmp60 = 1
	  li $t2, 1		# load constant value 1 into $t2
	  sw $t2, -172($fp)	# spill _tmp60 from $t2 to $fp-172
	# _tmp61 = _tmp60 + _tmp56
	  lw $t0, -172($fp)	# fill _tmp60 to $t0 from $fp-172
	  lw $t1, -152($fp)	# fill _tmp56 to $t1 from $fp-152
	  add $t2, $t0, $t1	
	  sw $t2, -176($fp)	# spill _tmp61 from $t2 to $fp-176
	# _tmp62 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -180($fp)	# spill _tmp62 from $t2 to $fp-180
	# _tmp63 = _tmp61 * _tmp62
	  lw $t0, -176($fp)	# fill _tmp61 to $t0 from $fp-176
	  lw $t1, -180($fp)	# fill _tmp62 to $t1 from $fp-180
	  mul $t2, $t0, $t1	
	  sw $t2, -184($fp)	# spill _tmp63 from $t2 to $fp-184
	# PushParam _tmp63
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -184($fp)	# fill _tmp63 to $t0 from $fp-184
	  sw $t0, 4($sp)	# copy param value to stack
	# _tmp64 = LCall _Alloc
	  jal _Alloc         	# jump to function
	  move $t2, $v0		# copy function return value from $v0
	  sw $t2, -188($fp)	# spill _tmp64 from $t2 to $fp-188
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# *(_tmp64) = _tmp56
	  lw $t0, -152($fp)	# fill _tmp56 to $t0 from $fp-152
	  lw $t2, -188($fp)	# fill _tmp64 to $t2 from $fp-188
	  sw $t0, 0($t2) 	# store with offset
	# _tmp65 = _tmp64 + _tmp62
	  lw $t0, -188($fp)	# fill _tmp64 to $t0 from $fp-188
	  lw $t1, -180($fp)	# fill _tmp62 to $t1 from $fp-180
	  add $t2, $t0, $t1	
	  sw $t2, -192($fp)	# spill _tmp65 from $t2 to $fp-192
	# c = _tmp65
	  lw $t2, -192($fp)	# fill _tmp65 to $t2 from $fp-192
	  sw $t2, -8($fp)	# spill c from $t2 to $fp-8
	# _tmp66 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -196($fp)	# spill _tmp66 from $t2 to $fp-196
	# _tmp67 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -200($fp)	# spill _tmp67 from $t2 to $fp-200
	# _tmp68 = 5
	  li $t2, 5		# load constant value 5 into $t2
	  sw $t2, -204($fp)	# spill _tmp68 from $t2 to $fp-204
	# _tmp69 = 3
	  li $t2, 3		# load constant value 3 into $t2
	  sw $t2, -208($fp)	# spill _tmp69 from $t2 to $fp-208
	# _tmp70 = _tmp68 * _tmp69
	  lw $t0, -204($fp)	# fill _tmp68 to $t0 from $fp-204
	  lw $t1, -208($fp)	# fill _tmp69 to $t1 from $fp-208
	  mul $t2, $t0, $t1	
	  sw $t2, -212($fp)	# spill _tmp70 from $t2 to $fp-212
	# _tmp71 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -216($fp)	# spill _tmp71 from $t2 to $fp-216
	# _tmp72 = _tmp70 / _tmp71
	  lw $t0, -212($fp)	# fill _tmp70 to $t0 from $fp-212
	  lw $t1, -216($fp)	# fill _tmp71 to $t1 from $fp-216
	  div $t2, $t0, $t1	
	  sw $t2, -220($fp)	# spill _tmp72 from $t2 to $fp-220
	# _tmp73 = 2
	  li $t2, 2		# load constant value 2 into $t2
	  sw $t2, -224($fp)	# spill _tmp73 from $t2 to $fp-224
	# _tmp74 = _tmp72 % _tmp73
	  lw $t0, -220($fp)	# fill _tmp72 to $t0 from $fp-220
	  lw $t1, -224($fp)	# fill _tmp73 to $t1 from $fp-224
	  rem $t2, $t0, $t1	
	  sw $t2, -228($fp)	# spill _tmp74 from $t2 to $fp-228
	# _tmp75 = _tmp67 + _tmp74
	  lw $t0, -200($fp)	# fill _tmp67 to $t0 from $fp-200
	  lw $t1, -228($fp)	# fill _tmp74 to $t1 from $fp-228
	  add $t2, $t0, $t1	
	  sw $t2, -232($fp)	# spill _tmp75 from $t2 to $fp-232
	# _tmp76 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -236($fp)	# spill _tmp76 from $t2 to $fp-236
	# _tmp77 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -240($fp)	# spill _tmp77 from $t2 to $fp-240
	# _tmp78 = _tmp76 < _tmp77
	  lw $t0, -236($fp)	# fill _tmp76 to $t0 from $fp-236
	  lw $t1, -240($fp)	# fill _tmp77 to $t1 from $fp-240
	  slt $t2, $t0, $t1	
	  sw $t2, -244($fp)	# spill _tmp78 from $t2 to $fp-244
	# _tmp79 = *(c + -4)
	  lw $t0, -8($fp)	# fill c to $t0 from $fp-8
	  lw $t2, -4($t0) 	# load with offset
	  sw $t2, -248($fp)	# spill _tmp79 from $t2 to $fp-248
	# _tmp80 = _tmp76 < _tmp79
	  lw $t0, -236($fp)	# fill _tmp76 to $t0 from $fp-236
	  lw $t1, -248($fp)	# fill _tmp79 to $t1 from $fp-248
	  slt $t2, $t0, $t1	
	  sw $t2, -252($fp)	# spill _tmp80 from $t2 to $fp-252
	# _tmp81 = _tmp80 == _tmp77
	  lw $t0, -252($fp)	# fill _tmp80 to $t0 from $fp-252
	  lw $t1, -240($fp)	# fill _tmp77 to $t1 from $fp-240
	  seq $t2, $t0, $t1	
	  sw $t2, -256($fp)	# spill _tmp81 from $t2 to $fp-256
	# _tmp82 = _tmp78 || _tmp81
	  lw $t0, -244($fp)	# fill _tmp78 to $t0 from $fp-244
	  lw $t1, -256($fp)	# fill _tmp81 to $t1 from $fp-256
	  or $t2, $t0, $t1	
	  sw $t2, -260($fp)	# spill _tmp82 from $t2 to $fp-260
	# IfZ _tmp82 Goto _L6
	  lw $t0, -260($fp)	# fill _tmp82 to $t0 from $fp-260
	  beqz $t0, _L6	# branch if _tmp82 is zero 
	# _tmp83 = "Decaf runtime error: Array size is <= 0\n"
	  .data			# create string constant marked with label
	  _string7: .asciiz "Decaf runtime error: Array size is <= 0\n"
	  .text
	  la $t2, _string7	# load label
	  sw $t2, -264($fp)	# spill _tmp83 from $t2 to $fp-264
	# PushParam _tmp83
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -264($fp)	# fill _tmp83 to $t0 from $fp-264
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L6:
	# _tmp84 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -268($fp)	# spill _tmp84 from $t2 to $fp-268
	# _tmp85 = _tmp84 * _tmp76
	  lw $t0, -268($fp)	# fill _tmp84 to $t0 from $fp-268
	  lw $t1, -236($fp)	# fill _tmp76 to $t1 from $fp-236
	  mul $t2, $t0, $t1	
	  sw $t2, -272($fp)	# spill _tmp85 from $t2 to $fp-272
	# _tmp86 = c + _tmp85
	  lw $t0, -8($fp)	# fill c to $t0 from $fp-8
	  lw $t1, -272($fp)	# fill _tmp85 to $t1 from $fp-272
	  add $t2, $t0, $t1	
	  sw $t2, -276($fp)	# spill _tmp86 from $t2 to $fp-276
	# *(_tmp86) = _tmp75
	  lw $t0, -232($fp)	# fill _tmp75 to $t0 from $fp-232
	  lw $t2, -276($fp)	# fill _tmp86 to $t2 from $fp-276
	  sw $t0, 0($t2) 	# store with offset
	# _tmp87 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -280($fp)	# spill _tmp87 from $t2 to $fp-280
	# _tmp88 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -284($fp)	# spill _tmp88 from $t2 to $fp-284
	# _tmp89 = 55
	  li $t2, 55		# load constant value 55 into $t2
	  sw $t2, -288($fp)	# spill _tmp89 from $t2 to $fp-288
	# _tmp90 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -292($fp)	# spill _tmp90 from $t2 to $fp-292
	# _tmp91 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -296($fp)	# spill _tmp91 from $t2 to $fp-296
	# _tmp92 = _tmp90 < _tmp91
	  lw $t0, -292($fp)	# fill _tmp90 to $t0 from $fp-292
	  lw $t1, -296($fp)	# fill _tmp91 to $t1 from $fp-296
	  slt $t2, $t0, $t1	
	  sw $t2, -300($fp)	# spill _tmp92 from $t2 to $fp-300
	# _tmp93 = *(d + -4)
	  lw $t0, -12($fp)	# fill d to $t0 from $fp-12
	  lw $t2, -4($t0) 	# load with offset
	  sw $t2, -304($fp)	# spill _tmp93 from $t2 to $fp-304
	# _tmp94 = _tmp90 < _tmp93
	  lw $t0, -292($fp)	# fill _tmp90 to $t0 from $fp-292
	  lw $t1, -304($fp)	# fill _tmp93 to $t1 from $fp-304
	  slt $t2, $t0, $t1	
	  sw $t2, -308($fp)	# spill _tmp94 from $t2 to $fp-308
	# _tmp95 = _tmp94 == _tmp91
	  lw $t0, -308($fp)	# fill _tmp94 to $t0 from $fp-308
	  lw $t1, -296($fp)	# fill _tmp91 to $t1 from $fp-296
	  seq $t2, $t0, $t1	
	  sw $t2, -312($fp)	# spill _tmp95 from $t2 to $fp-312
	# _tmp96 = _tmp92 || _tmp95
	  lw $t0, -300($fp)	# fill _tmp92 to $t0 from $fp-300
	  lw $t1, -312($fp)	# fill _tmp95 to $t1 from $fp-312
	  or $t2, $t0, $t1	
	  sw $t2, -316($fp)	# spill _tmp96 from $t2 to $fp-316
	# IfZ _tmp96 Goto _L7
	  lw $t0, -316($fp)	# fill _tmp96 to $t0 from $fp-316
	  beqz $t0, _L7	# branch if _tmp96 is zero 
	# _tmp97 = "Decaf runtime error: Array size is <= 0\n"
	  .data			# create string constant marked with label
	  _string8: .asciiz "Decaf runtime error: Array size is <= 0\n"
	  .text
	  la $t2, _string8	# load label
	  sw $t2, -320($fp)	# spill _tmp97 from $t2 to $fp-320
	# PushParam _tmp97
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -320($fp)	# fill _tmp97 to $t0 from $fp-320
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L7:
	# _tmp98 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -324($fp)	# spill _tmp98 from $t2 to $fp-324
	# _tmp99 = _tmp98 * _tmp90
	  lw $t0, -324($fp)	# fill _tmp98 to $t0 from $fp-324
	  lw $t1, -292($fp)	# fill _tmp90 to $t1 from $fp-292
	  mul $t2, $t0, $t1	
	  sw $t2, -328($fp)	# spill _tmp99 from $t2 to $fp-328
	# _tmp100 = d + _tmp99
	  lw $t0, -12($fp)	# fill d to $t0 from $fp-12
	  lw $t1, -328($fp)	# fill _tmp99 to $t1 from $fp-328
	  add $t2, $t0, $t1	
	  sw $t2, -332($fp)	# spill _tmp100 from $t2 to $fp-332
	# _tmp101 = *(_tmp100)
	  lw $t0, -332($fp)	# fill _tmp100 to $t0 from $fp-332
	  lw $t2, 0($t0) 	# load with offset
	  sw $t2, -336($fp)	# spill _tmp101 from $t2 to $fp-336
	# _tmp102 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -340($fp)	# spill _tmp102 from $t2 to $fp-340
	# _tmp103 = _tmp90 < _tmp102
	  lw $t0, -292($fp)	# fill _tmp90 to $t0 from $fp-292
	  lw $t1, -340($fp)	# fill _tmp102 to $t1 from $fp-340
	  slt $t2, $t0, $t1	
	  sw $t2, -344($fp)	# spill _tmp103 from $t2 to $fp-344
	# _tmp104 = *(d + -4)
	  lw $t0, -12($fp)	# fill d to $t0 from $fp-12
	  lw $t2, -4($t0) 	# load with offset
	  sw $t2, -348($fp)	# spill _tmp104 from $t2 to $fp-348
	# _tmp105 = _tmp90 < _tmp104
	  lw $t0, -292($fp)	# fill _tmp90 to $t0 from $fp-292
	  lw $t1, -348($fp)	# fill _tmp104 to $t1 from $fp-348
	  slt $t2, $t0, $t1	
	  sw $t2, -352($fp)	# spill _tmp105 from $t2 to $fp-352
	# _tmp106 = _tmp105 == _tmp102
	  lw $t0, -352($fp)	# fill _tmp105 to $t0 from $fp-352
	  lw $t1, -340($fp)	# fill _tmp102 to $t1 from $fp-340
	  seq $t2, $t0, $t1	
	  sw $t2, -356($fp)	# spill _tmp106 from $t2 to $fp-356
	# _tmp107 = _tmp103 || _tmp106
	  lw $t0, -344($fp)	# fill _tmp103 to $t0 from $fp-344
	  lw $t1, -356($fp)	# fill _tmp106 to $t1 from $fp-356
	  or $t2, $t0, $t1	
	  sw $t2, -360($fp)	# spill _tmp107 from $t2 to $fp-360
	# IfZ _tmp107 Goto _L8
	  lw $t0, -360($fp)	# fill _tmp107 to $t0 from $fp-360
	  beqz $t0, _L8	# branch if _tmp107 is zero 
	# _tmp108 = "Decaf runtime error: Array size is <= 0\n"
	  .data			# create string constant marked with label
	  _string9: .asciiz "Decaf runtime error: Array size is <= 0\n"
	  .text
	  la $t2, _string9	# load label
	  sw $t2, -364($fp)	# spill _tmp108 from $t2 to $fp-364
	# PushParam _tmp108
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -364($fp)	# fill _tmp108 to $t0 from $fp-364
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L8:
	# _tmp109 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -368($fp)	# spill _tmp109 from $t2 to $fp-368
	# _tmp110 = _tmp109 * _tmp90
	  lw $t0, -368($fp)	# fill _tmp109 to $t0 from $fp-368
	  lw $t1, -292($fp)	# fill _tmp90 to $t1 from $fp-292
	  mul $t2, $t0, $t1	
	  sw $t2, -372($fp)	# spill _tmp110 from $t2 to $fp-372
	# _tmp111 = _tmp101 + _tmp110
	  lw $t0, -336($fp)	# fill _tmp101 to $t0 from $fp-336
	  lw $t1, -372($fp)	# fill _tmp110 to $t1 from $fp-372
	  add $t2, $t0, $t1	
	  sw $t2, -376($fp)	# spill _tmp111 from $t2 to $fp-376
	# *(_tmp111) = _tmp89
	  lw $t0, -288($fp)	# fill _tmp89 to $t0 from $fp-288
	  lw $t2, -376($fp)	# fill _tmp111 to $t2 from $fp-376
	  sw $t0, 0($t2) 	# store with offset
	# _tmp112 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -380($fp)	# spill _tmp112 from $t2 to $fp-380
	# _tmp113 = " "
	  .data			# create string constant marked with label
	  _string10: .asciiz " "
	  .text
	  la $t2, _string10	# load label
	  sw $t2, -384($fp)	# spill _tmp113 from $t2 to $fp-384
	# _tmp114 = 2
	  li $t2, 2		# load constant value 2 into $t2
	  sw $t2, -388($fp)	# spill _tmp114 from $t2 to $fp-388
	# _tmp115 = 100
	  li $t2, 100		# load constant value 100 into $t2
	  sw $t2, -392($fp)	# spill _tmp115 from $t2 to $fp-392
	# _tmp116 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -396($fp)	# spill _tmp116 from $t2 to $fp-396
	# PushParam c
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -8($fp)	# fill c to $t0 from $fp-8
	  sw $t0, 4($sp)	# copy param value to stack
	# PushParam c
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -8($fp)	# fill c to $t0 from $fp-8
	  sw $t0, 4($sp)	# copy param value to stack
	# PushParam _tmp115
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -392($fp)	# fill _tmp115 to $t0 from $fp-392
	  sw $t0, 4($sp)	# copy param value to stack
	# _tmp117 = LCall _Binky
	  jal _Binky         	# jump to function
	  move $t2, $v0		# copy function return value from $v0
	  sw $t2, -400($fp)	# spill _tmp117 from $t2 to $fp-400
	# PopParams 12
	  add $sp, $sp, 12	# pop params off stack
	# _tmp118 = _tmp114 * _tmp117
	  lw $t0, -388($fp)	# fill _tmp114 to $t0 from $fp-388
	  lw $t1, -400($fp)	# fill _tmp117 to $t1 from $fp-400
	  mul $t2, $t0, $t1	
	  sw $t2, -404($fp)	# spill _tmp118 from $t2 to $fp-404
	# _tmp119 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -408($fp)	# spill _tmp119 from $t2 to $fp-408
	# _tmp120 = 0
	  li $t2, 0		# load constant value 0 into $t2
	  sw $t2, -412($fp)	# spill _tmp120 from $t2 to $fp-412
	# _tmp121 = _tmp119 < _tmp120
	  lw $t0, -408($fp)	# fill _tmp119 to $t0 from $fp-408
	  lw $t1, -412($fp)	# fill _tmp120 to $t1 from $fp-412
	  slt $t2, $t0, $t1	
	  sw $t2, -416($fp)	# spill _tmp121 from $t2 to $fp-416
	# _tmp122 = *(c + -4)
	  lw $t0, -8($fp)	# fill c to $t0 from $fp-8
	  lw $t2, -4($t0) 	# load with offset
	  sw $t2, -420($fp)	# spill _tmp122 from $t2 to $fp-420
	# _tmp123 = _tmp119 < _tmp122
	  lw $t0, -408($fp)	# fill _tmp119 to $t0 from $fp-408
	  lw $t1, -420($fp)	# fill _tmp122 to $t1 from $fp-420
	  slt $t2, $t0, $t1	
	  sw $t2, -424($fp)	# spill _tmp123 from $t2 to $fp-424
	# _tmp124 = _tmp123 == _tmp120
	  lw $t0, -424($fp)	# fill _tmp123 to $t0 from $fp-424
	  lw $t1, -412($fp)	# fill _tmp120 to $t1 from $fp-412
	  seq $t2, $t0, $t1	
	  sw $t2, -428($fp)	# spill _tmp124 from $t2 to $fp-428
	# _tmp125 = _tmp121 || _tmp124
	  lw $t0, -416($fp)	# fill _tmp121 to $t0 from $fp-416
	  lw $t1, -428($fp)	# fill _tmp124 to $t1 from $fp-428
	  or $t2, $t0, $t1	
	  sw $t2, -432($fp)	# spill _tmp125 from $t2 to $fp-432
	# IfZ _tmp125 Goto _L9
	  lw $t0, -432($fp)	# fill _tmp125 to $t0 from $fp-432
	  beqz $t0, _L9	# branch if _tmp125 is zero 
	# _tmp126 = "Decaf runtime error: Array size is <= 0\n"
	  .data			# create string constant marked with label
	  _string11: .asciiz "Decaf runtime error: Array size is <= 0\n"
	  .text
	  la $t2, _string11	# load label
	  sw $t2, -436($fp)	# spill _tmp126 from $t2 to $fp-436
	# PushParam _tmp126
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -436($fp)	# fill _tmp126 to $t0 from $fp-436
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# LCall _Halt
	  jal _Halt          	# jump to function
  _L9:
	# _tmp127 = 4
	  li $t2, 4		# load constant value 4 into $t2
	  sw $t2, -440($fp)	# spill _tmp127 from $t2 to $fp-440
	# _tmp128 = _tmp127 * _tmp119
	  lw $t0, -440($fp)	# fill _tmp127 to $t0 from $fp-440
	  lw $t1, -408($fp)	# fill _tmp119 to $t1 from $fp-408
	  mul $t2, $t0, $t1	
	  sw $t2, -444($fp)	# spill _tmp128 from $t2 to $fp-444
	# _tmp129 = c + _tmp128
	  lw $t0, -8($fp)	# fill c to $t0 from $fp-8
	  lw $t1, -444($fp)	# fill _tmp128 to $t1 from $fp-444
	  add $t2, $t0, $t1	
	  sw $t2, -448($fp)	# spill _tmp129 from $t2 to $fp-448
	# _tmp130 = *(_tmp129)
	  lw $t0, -448($fp)	# fill _tmp129 to $t0 from $fp-448
	  lw $t2, 0($t0) 	# load with offset
	  sw $t2, -452($fp)	# spill _tmp130 from $t2 to $fp-452
	# PushParam _tmp130
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -452($fp)	# fill _tmp130 to $t0 from $fp-452
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# PushParam _tmp113
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -384($fp)	# fill _tmp113 to $t0 from $fp-384
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintString
	  jal _PrintString   	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# PushParam _tmp118
	  subu $sp, $sp, 4	# decrement sp to make space for param
	  lw $t0, -404($fp)	# fill _tmp118 to $t0 from $fp-404
	  sw $t0, 4($sp)	# copy param value to stack
	# LCall _PrintInt
	  jal _PrintInt      	# jump to function
	# PopParams 4
	  add $sp, $sp, 4	# pop params off stack
	# EndFunc
	# (below handles reaching end of fn body with no explicit return)
	  move $sp, $fp		# pop callee frame off stack
	  lw $ra, -4($fp)	# restore saved ra
	  lw $fp, 0($fp)	# restore saved fp
	  jr $ra		# return from function
